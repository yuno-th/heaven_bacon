import copy
import random;

class HashTable:
    class Entry:
       def __init__(self,k,v):
            self.key = k; self.value = v;

    def __init__(self,m=1):
        if(m <= 0): m = 1;
        self.table = [None]*m;
        self.size = 0;
        self.DELETE = self.Entry(object(),None);
        self.numExistCells = 0;

    def __indexOf(self,key):
        hI = self.__h(key);
        for j in range(len(self.table)):
            e = self.table[hI];
            if(e == None or e.key == key): return hI;
            hI = (hI + 1) % len(self.table);
            
    def __h(self,key):
        key = str(key);
        return (abs(hash(key)))% len(self.table)

    def length(self): return self.size;    

    def get(self,key):
        hI = self.__indexOf(key);
        e = self.table[hI];
        return None if (e == None or e == self.DELETE) else e.value;

    def put(self,k,v):
        empty = -1;
        oldValue = None;
        hI = self.__h(k);
        
        for j in range(len(self.table)):
            e = self.table[hI]
            if(e == self.DELETE and empty == -1): empty = hI;
            if(e == None or e.key == k): break;
            hI = (hI + 1) % len(self.table);
        
        if(self.table[hI] == None):
            if(empty != -1): hI = empty;
            self.table[hI] = self.Entry(k,v);
            self.size += 1;
            if(empty == -1): self.numExistCells += 1;
            if(self.numExistCells > len(self.table)/2): self.rehash();
            
        elif(self.table[hI].key == k):
            oldValue = self.table[hI].value;
            self.table[hI].value = v;

        return oldValue;

    def remove(self,key):
        hI = self.__indexOf(key);
        if(self.table[hI] != None):
            self.table[hI] = self.DELETE;
            self.size -= 1;

    def rehash(self):
        oldTable = self.table
        self.table = [None] * self.size * 4
        self.size = self.numExistCells = 0;
        for i in range(len(oldTable)):
            entry = oldTable[i]
            if(entry != None and entry != self.DELETE):
                self.put(entry.key,entry.value)
    

class minheap:
    data,s = [],0;
    def __greather(self,i,j):
        return self.data[i].cost() < self.data[j].cost(); 
    def __fix_up(self,n):
        while( n > 0 ):
            p = (n - 1)//2; 
            if(not self.__greather(n,p)): break; 
            self.data[n],self.data[p] = self.data[p],self.data[n];
            n = p;
    def __fix_down(self,p):
        while(  2*p + 1 < self.s): 
            cI = 2*p + 1;
            if ( cI + 1 < self.s and self.__greather(cI+1,cI)): cI += 1;
            if ( self.__greather(p,cI)) : break; 
            self.data[p],self.data[cI] = self.data[cI],self.data[p];
            p = cI;
    def size(self): return self.s;
    def peek(self): return None if self.s == 0 else self.data[0];
    def enqueue(self,obj):
        if( obj == None ): return
        self.data.append(obj); self.__fix_up(self.s); self.s += 1;
    def dequeue(self):
        top = self.peek(); self.s -= 1;
        self.data[0] = self.data[self.s]; self.data.pop();
        if(self.s > 0) : self.__fix_down(0);
        return top;



actionList = ['U', 'Ui', 'D', 'Di', 'R', 'Ri', 'L', 'Li', 'B', 'Bi', 'F', 'Fi']


def transition(node, action):
    statusBf = copy.deepcopy(node.status)
    statusAf = copy.deepcopy(node.status)
    
    if action == 'U':
        statusAf[0] = statusBf[6]
        statusAf[2] = statusBf[0]
        statusAf[4] = statusBf[2]
        statusAf[6] = statusBf[4]
        
        statusAf[1] = statusBf[7]
        statusAf[3] = statusBf[1]
        statusAf[5] = statusBf[3]
        statusAf[7] = statusBf[5]
        
        if node.lastMove == 'U':
            repMove = node.repMove + 1
            if repMove == 3:
                statusAf = None    
        else:
            repMove = 1  

    if action == 'Ui':
        statusAf[6] = statusBf[0]
        statusAf[0] = statusBf[2]
        statusAf[2] = statusBf[4]
        statusAf[4] = statusBf[6]
        
        statusAf[7] = statusBf[1]
        statusAf[1] = statusBf[3]
        statusAf[3] = statusBf[5]
        statusAf[5] = statusBf[7]
        
        if node.lastMove == 'Ui':
            repMove = node.repMove + 1
            if repMove == 3:
                statusAf = None    
        else:
            repMove = 1  
            
    if action == 'D':     
        statusAf[8] = statusBf[14]
        statusAf[10] = statusBf[8]
        statusAf[12] = statusBf[10]
        statusAf[14] = statusBf[12]
        
        statusAf[9] = statusBf[15]
        statusAf[11] = statusBf[9]
        statusAf[13] = statusBf[11]
        statusAf[15] = statusBf[13]    
        
        if node.lastMove == 'D':
            repMove = node.repMove + 1
            if repMove == 3:
                statusAf = None    
        else:
            repMove = 1          

    if action == 'Di':     
        statusAf[14] = statusBf[8]
        statusAf[8] = statusBf[10]
        statusAf[10] = statusBf[12]
        statusAf[12] = statusBf[14]
        
        statusAf[15] = statusBf[9]
        statusAf[9] = statusBf[11]
        statusAf[11] = statusBf[13]
        statusAf[13] = statusBf[15]    
        
        if node.lastMove == 'Di':
            repMove = node.repMove + 1
            if repMove == 3:
                statusAf = None    
        else:
            repMove = 1  
            
    if action == 'R':  
        statusAf[2] = statusBf[10]
        statusAf[4] = statusBf[2]
        statusAf[12] = statusBf[4]
        statusAf[10] = statusBf[12]
        
        statusAf[3] = statusBf[17]
        statusAf[18] = statusBf[3]
        statusAf[11] = statusBf[18]
        statusAf[17] = statusBf[11]   
        
        if node.lastMove == 'R':
            repMove = node.repMove + 1
            if repMove == 3:
                statusAf = None    
        else:
            repMove = 1          

    if action == 'Ri':  
        statusAf[10] = statusBf[2]
        statusAf[2] = statusBf[4]
        statusAf[4] = statusBf[12]
        statusAf[12] = statusBf[10]
        
        statusAf[17] = statusBf[3]
        statusAf[3] = statusBf[18]
        statusAf[18] = statusBf[11]
        statusAf[11] = statusBf[17]   
        
        if node.lastMove == 'Ri':
            repMove = node.repMove + 1
            if repMove == 3:
                statusAf = None    
        else:
            repMove = 1

    if action == 'L':       
        statusAf[0] = statusBf[8]
        statusAf[6] = statusBf[0]
        statusAf[14] = statusBf[6]
        statusAf[8] = statusBf[14]
        
        statusAf[7] = statusBf[16]
        statusAf[19] = statusBf[7]
        statusAf[15] = statusBf[19]
        statusAf[16] = statusBf[15]
        
        if node.lastMove == 'L':
            repMove = node.repMove + 1
            if repMove == 3:
                statusAf = None    
        else:
            repMove = 1  

    if action == 'Li':       
        statusAf[8] = statusBf[0]
        statusAf[0] = statusBf[6]
        statusAf[6] = statusBf[14]
        statusAf[14] = statusBf[8]
        
        statusAf[16] = statusBf[7]
        statusAf[7] = statusBf[19]
        statusAf[19] = statusBf[15]
        statusAf[15] = statusBf[16]
        
        if node.lastMove == 'Li':
            repMove = node.repMove + 1
            if repMove == 3:
                statusAf = None    
        else:
            repMove = 1              
            
    if action == 'B':
        statusAf[6] = statusBf[14]
        statusAf[4] = statusBf[6]
        statusAf[12] = statusBf[4]
        statusAf[14] = statusBf[12]
        
        statusAf[5] = statusBf[19]
        statusAf[18] = statusBf[5]
        statusAf[13] = statusBf[18]
        statusAf[19] = statusBf[13]
        
        if node.lastMove == 'B':
            repMove = node.repMove + 1
            if repMove == 3:
                statusAf = None    
        else:
            repMove = 1  
            
    if action == 'Bi':
        statusAf[14] = statusBf[6]
        statusAf[6] = statusBf[4]
        statusAf[4] = statusBf[12]
        statusAf[12] = statusBf[14]
        
        statusAf[19] = statusBf[5]
        statusAf[5] = statusBf[18]
        statusAf[18] = statusBf[13]
        statusAf[13] = statusBf[19]
        
        if node.lastMove == 'Bi':
            repMove = node.repMove + 1
            if repMove == 3:
                statusAf = None    
        else:
            repMove = 1  

    if action == 'F':
        statusAf[0] = statusBf[8]
        statusAf[2] = statusBf[0]
        statusAf[10] = statusBf[2]
        statusAf[8] = statusBf[10]
        
        statusAf[1] = statusBf[16]
        statusAf[17] = statusBf[1]
        statusAf[9] = statusBf[17]
        statusAf[16] = statusBf[9]
        
        if node.lastMove == 'F':
            repMove = node.repMove + 1
            if repMove == 3:
                statusAf = None    
        else:
            repMove = 1
            
    if action == 'Fi':
        statusAf[8] = statusBf[0]
        statusAf[0] = statusBf[2]
        statusAf[2] = statusBf[10]
        statusAf[10] = statusBf[8]
        
        statusAf[16] = statusBf[1]
        statusAf[1] = statusBf[17]
        statusAf[17] = statusBf[9]
        statusAf[9] = statusBf[16]
        
        if node.lastMove == 'Fi':
            repMove = node.repMove + 1
            if repMove == 3:
                statusAf = None    
        else:
            repMove = 1

    child = Node(statusAf, action, repMove, node)
    child.depth = node.depth + 1
    if statusAf == None :
        return(None)
    else:
        return(child)

def h_2(node):
    edge = [2, 4, 6, 8, 10, 12, 14, 16, 17, 18, 19, 20]
    Index_edge = [1, 3, 5, 7, 9, 11, 13, 15, 16, 17, 18, 19]
    n = 0
    for i in range(12) :
        if node.status[Index_edge[i]] != edge[i]:
            n += 1
    return(n) + node.depth*W

    

def goalCheck(node):
    target = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];
    return node.status == target;


def solve(initial):    
    frontier = minheap();
    frontier.enqueue(initial);
    solution = []
    h = HashTable(10000);
    while frontier.size() > 0:
        node = frontier.dequeue();
        if goalCheck(node):
            path = [node]
            while node.parent != None : 
                path.insert(0, node.parent)
                node = node.parent
                solution = path
            break
        else:
            for action in actionList:
                new_item = transition(node,action);
                if(new_item == None): continue;
                n = h.get(new_item);
                if(n == None):
                    frontier.enqueue(new_item);
                    h.put(new_item,new_item);
    return(solution,h.length())

class Node():
    depth = 0;
    def __init__(self, status, lastMove, repMove, parent):
        self.status = status
        self.lastMove = lastMove
        self.repMove = repMove
        self.parent = parent

    def cost(self):
        return h_2(self);



def printSolution(solution):
    print("\nOUTPUT\n");
    for node in solution:
        print( node.lastMove,node.status)

W = 2.8;


initialState = Node([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], None, None, None)
for i in range(5):
    act = random.choice(actionList)
    initialState = transition(initialState, act)
print("INPUT\n");

initial = Node(initialState.status,None,None,None);
print(initial.status);


def exp():
    sln2,n2 = solve(initial);
    printSolution(sln2);

exp();
